{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 TO DO:\
01) View Hierarchy\

\b0   - programmatically outline project\
    - The problem with this is that I have to first Implement a sound model. 
\b \
02) Implement Model\
03) Controllers With Staged Data\
04) Wire Views to Staged Data\
05) Test Flight\
06) Implement Controllers\
07) Test Flight\
08) Implement Monetization\
09) Test Flight\
10) Polish Visual Design and Features\
11) Final Test Flight\
12) Ship App \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\i DONE
\i0 \

\b0 Define collection view controllers for each collection view\
  how are they different?\
    Working collection view needs to do 3 things.\
      1. Show isCompleted = NO images\
      2. When an image is tapped -> show fuzzle\
      3. When Add Fuzzle is tapped, pop up modal CreateNewFuzzle\
            (add fuzzle will be in nav bar as well as at the end of fuzzle images)\
    Completed collection view needs to do 2 things\
      1. Show isCompleted = YES images\
      2. When an images is tapped -> show completed fuzzle modal screen\
  how are they similar?\
    The both need to pull up images (completed or not and display them)\
      I can affect the appearance - maybe I can even change the tabBarTint Color to accent group\
    they both link to a new view controller when an image is tapped\
      (maybe I could simply change where they\'92re linking depending on which tab is selected)\
    But I\'92ve got the extra button to add an image in the navigation bar on the Working Controller\
      (I think this might be enough of a reason right now to use 2 separate controllers)\
  should I be using 1 or 2 controllers?\
    
\i right now, I\'92m going to use 2 controllers, for simplicity\'92s sake.
\i0 \
  use real images to get an idea of what collection view will look like with real images\
    have it pull from an array of image titles\
Add functionality to newImage view controller\
  edit photo block that will be used, and use correct proportions 
\b (I got Correct proportions!)
\b0 \
  save photo to new image list\

\i\b DONE
\i0\b0 \

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0 \
  enable user selection for number of pieces per puzzle (I\'92m going to make this functionality an in-app purchase.)\
\

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\i DONE
\i0\b0 \
Add completed fuzzle modal screen\
  This will be the view the user is taken to when a picture is selected from the completed fuzzles\
  Light box (dark, low opacity background)\
    shows an enlarged image of the fuzzle (no lines, just image)\

\i\b DONE
\i0\b0 \

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0 \
    Three options \
      ReFuzzle (mix up puzzle and change isCompleted to NO)\
      Cancel\
      Delete Fuzzle\
\

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\i DONE
\i0\b0 \
Transpose functionality into the actual FuzzlePic View Controller\
  have image loaded, scrambled (in a solvable form), missing one piece\
  each time a piece is touched or swiped, have piece move to empty space\

\i\b DONE
\i0\b0 \

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0  \
    and (SEND UPDATED IMAGE LOCATION TO MODEL)\
  when fuzzle matches correct completed fuzzle order send Alert \'93You Did It!\'94 Try again, Done \
\

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0 \
\
Track Launch Count\
  - by version\
\
\
UIImagePicker allowsEditing = YES; (this took all my images and turned them into perfect squares before I saved them. \'97 I might have to edit.\
\
Contact has thumbnailImageContent (that\'92s already a square)\
\
\

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0 \
\
Implement Model\
\
fuzzleImage (I guess we\'92re not going to save these in the model am I going to want to save a URL)\
\
\
FuzzlePicObj : NSManagedObject \
NSNumber fuzzleWidth\
BOOL isComplete\
\

\b \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Steps for NSUserDefaults
\b0 \
  - Convert custom model objects to NSDictionaries or NSData\
  On the Model Objects themselves\
    - customize the init functions to be able to initialize with NSUserDefaults compatible data type\
    - make sure there\'92s some kind of method to turn it into that data type as well e.g. dictionaryRepresentation\
  On the Model Controller objects\
    - add a saveToPersistentStorage method that goes through all your model objects and converts them to an NSUserDefaults compatible data type, puts them in a package (array or dictionary) and saves them down to NSUserDefaults\
      The following 2 methods actually store down the data:\
      - [[NSUserDefaults standardDefaults] object: (dictionary or array package) forKey: @\'93randKey\'94]];\
      - [[NSUserDefaults standardDefaults] synchronize];\
    - add a loadFromPersistentStorage that pulls that package out of NSUserDefaults and initializes all the objects from the NSUserDefault compatible data\
      The following method actually pulls out the data:\
      - (package type to accept the data)  = [[NSUserDefaults standardDefaults] objectAtKey: @\'93randKey\'94];\
\

\b Steps for CoreData
\b0 \
\
\

\b \ul Tonight\'92s Objectives
\b0 \ulnone \
- \
\
NSFileManager - save to disk\
NSUUID - UUIDString\
find the Documents folder in the phone\
String by Appending\
UIImage -> NSData -> ContentsWithFile\
dispatch_async\
\
\
\
\
\
\
\
\
       \
\
}